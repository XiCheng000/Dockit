name: Dockit Development Build

on:
  workflow_dispatch:
    inputs:
      branch:
        type: string
        default: 'main'
        description: 'branch'
        required: true
      release-new-build:
        type: boolean
        default: false
        description: 'Release new build'
        required: true

jobs:
  pre-release:
    name: Development Build
    runs-on: macos-14
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.branch }}

      - name: 🧪 Set Version and Build number
        run: |
          # CHANGE EVERY RELEASE:
          APP_VERSION="🧪 1.3.0"
          APP_BUILD=$(git rev-list --count HEAD)
          FROM_TAG=$(git describe --tags --abbrev=0 --exclude='prerelease')

          # Set VERSION
          latest_tag=$APP_VERSION
          echo "Latest tag: $latest_tag"
          sed -i -e "/VERSION =/ s/= .*/= $latest_tag/" Dockit/Config.xcconfig

          # Set BUILD_NUMBER
          latest_commit_number=$APP_BUILD
          echo "Latest commit number: $latest_commit_number"
          sed -i -e "/BUILD_NUMBER =/ s/= .*/= $latest_commit_number/" Dockit/Config.xcconfig

          echo "APP_VERSION=$APP_VERSION" >> $GITHUB_ENV
          echo "APP_BUILD=$APP_BUILD" >> $GITHUB_ENV
          echo "FROM_TAG=$FROM_TAG" >> $GITHUB_ENV

      - name: 🔧 Select Xcode
        run: sudo xcode-select -s "/Applications/Xcode_16.2.app"

      - name: 🛠️ Build Dockit
        run: |
          xcodebuild \
            archive \
            -project Dockit.xcodeproj/ \
            -scheme "Dockit" \
            -configuration Release \
            -destination 'generic/platform=macOS' \
            -archivePath dist/Dockit.xcarchive \
            -allowProvisioningUpdates \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO \
            CODE_SIGN_ENTITLEMENTS="" \
            ENABLE_HARDENED_RUNTIME=NO \
            DEVELOPMENT_TEAM=""

      - name: ⚙️ Install create-dmg
        run: brew install create-dmg

      - name: 📦 Create DMG
        run: |
          # 创建 DMG 内容的临时目录
          mkdir -p dmg_source/
          cp -R "dist/Dockit.xcarchive/Products/Applications/Dockit.app" dmg_source/

          # 创建指向 Applications 目录的符号链接
          ln -s /Applications dmg_source/Applications

          # 创建运行 xattr 命令的脚本
          cat << EOF > dmg_source/"click.command"
          #!/bin/bash
          echo "Running xattr to remove quarantine attribute..."
          xattr -cr /Applications/Dockit.app
          echo "Done. You can now launch Dockit from the Applications folder."
          # Optional: Keep terminal open for a bit
          sleep 5
          EOF
          chmod +x dmg_source/"click.command"

          # 使用 create-dmg 创建 DMG
          create-dmg \
            --volname "Dockit Installer" \
            --volicon "Resources/dmg-icon.svg" \
            --background "Resources/dmg-bg.svg" \
            --window-size 660 400 \
            --icon-size 60 \
            --icon "Dockit.app" 80 170 \
            --hide-extension "Dockit.app" \
            --icon "click.command" 520 170 \
            --app-drop-link 300 170 \
            "dist/Dockit.dmg" \
            "dmg_source/"

      - name: ⬆️ Upload Dockit DMG
        uses: actions/upload-artifact@v4
        with:
          name: Dockit-DMG
          path: dist/Dockit*.dmg # 使用通配符匹配 DMG 文件

      - name: 🏷️ Create/update tag
        uses: actions/github-script@v7
        if: "${{ inputs.release-new-build }}"
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/latest',
              sha: context.sha
            }).catch(err => {
              if (err.status !== 422) throw err;
              github.rest.git.updateRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: 'tags/latest',
                sha: context.sha
              });
            })

      - name: 📰 Build Changelog
        uses: mikepenz/release-changelog-builder-action@v4
        if: "${{ inputs.release-new-build }}"
        with:
          outputFile: CHANGELOG.md
          fromTag: ${{ env.FROM_TAG }}
          toTag: "latest"
          configurationJson: |
            {
              "template": "#{{CHANGELOG}}\n## 💭 Uncategorized\n#{{UNCATEGORIZED}}",
              "pr_template": "- #{{TITLE}} ##{{NUMBER}}",
              "categories": [
                {
                    "title": "## ✨ New Features",
                    "labels": ["Feature", "Luminare", "Improvement"]
                },
                {
                    "title": "## 🐞 Bug Fixes",
                    "labels": ["Bug"]
                },
                {
                    "title": "## 🌐 Localization",
                    "labels": ["Localization"]
                }
              ],
              "empty_template": "- ❌ No changes found"
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🥳 Publish Dev Build
        uses: ncipollo/release-action@v1
        if: "${{ inputs.release-new-build }}"
        with:
          allowUpdates: true
          artifacts: dist/Dockit*.dmg # 更新为上传 DMG 文件
          commit: main
          bodyFile: CHANGELOG.md
          name: "Development Build: ${{ env.APP_VERSION }} (${{ env.APP_BUILD }})"
          prerelease: false
          tag: latest
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧹 Cleanup
        run: |
          rm -rf dmg_source/ # 清理 DMG 源目录
          echo "Cleanup complete (keychain step skipped as certificate installation was removed)."
