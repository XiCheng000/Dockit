name: Dockit Development Build

on:
  workflow_dispatch:
    inputs:
      branch:
        type: string
        default: 'main'
        description: 'branch'
        required: true
      release-new-build:
        type: boolean
        default: false
        description: 'Release new build'
        required: true
      version:
        type: string
        default: ''
        description: 'Version'
        required: false

jobs:
  pre-release:
    name: Development Build
    runs-on: macos-14
    permissions:
      contents: write
      pull-requests: read
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ inputs.branch }}

      - name: 🔧 Select Xcode
        run: sudo xcode-select -s "/Applications/Xcode_16.2.app"

      - name: 🛠️ Build Dockit
        run: |
          mkdir -p dist # 确保 dist 目录存在，用于存放最终的 zip 文件
          xcodebuild \
            build \
            -project Dockit.xcodeproj/ \
            -scheme "Dockit" \
            -destination 'generic/platform=macOS' \
            -configuration Release \
            CONFIGURATION_BUILD_DIR=$(pwd)/build/Release \
            CODE_SIGN_IDENTITY="" \
            CODE_SIGNING_REQUIRED=NO

      - name: 🤏 Compress Dockit.app
        run: |
          ditto -c -k --sequesterRsrc --keepParent "build/Release/Dockit.app" "dist/Dockit.zip"
      
      - name: ⬆️ Upload Dockit
        uses: actions/upload-artifact@v4
        with:
          name: Dockit
          path: dist/Dockit.zip

      - name: 🤔 Determine Tag
        id: determine_tag
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const versionInput = '${{ inputs.version }}';
            const releaseNewBuild = '${{ inputs.release-new-build }}' === 'true';

            let tagName = 'prerelease';
            let createNewTag = false; // 指示是否是新版本发布（非 prerelease 更新）
            let isPrereleaseOnGitHub = true; // 所有构建都标记为 GitHub 预发布

            if (releaseNewBuild) {
              createNewTag = true;
              if (versionInput) {
                tagName = versionInput;
                console.log(`Using provided version as tag: ${tagName}`);
              } else {
                console.log('No version provided, attempting to determine next tag...');
                // 获取仓库所有标签
                const tagsResponse = await github.rest.repos.listTags({ owner, repo });
                const tags = tagsResponse.data.map(tag => tag.name);
                console.log(`Found tags: ${tags.join(', ')}`);

                // 筛选出语义化版本标签 (X.Y.Z 或 vX.Y.Z)
                const semverTags = tags
                  .filter(name => /^(v?\d+\.\d+\.\d+)$/.test(name))
                  .sort((a, b) => {
                    // 简单的语义化版本排序
                    const parseVer = (s) => s.replace(/^v/, '').split('.').map(Number);
                    const verA = parseVer(a);
                    const verB = parseVer(b);
                    for (let i = 0; i < 3; i++) {
                      if (verA[i] !== verB[i]) return verA[i] - verB[i];
                    }
                    return 0;
                  });

                console.log(`Found semver tags: ${semverTags.join(', ')}`);

                if (semverTags.length > 0) {
                  const latestTag = semverTags[semverTags.length - 1];
                  console.log(`Latest semver tag: ${latestTag}`);
                  const hasV = latestTag.startsWith('v');
                  const parts = latestTag.replace(/^v/, '').split('.').map(Number);
                  parts[2]++; // 增加补丁版本号
                  tagName = (hasV ? 'v' : '') + parts.join('.');
                  console.log(`Calculated next tag: ${tagName}`);
                } else {
                  tagName = '0.0.1'; // 如果没有找到标签，从 0.0.1 开始
                  console.log('No existing semver tags found, starting with:', tagName);
                }
              }
            } else {
               console.log('Not releasing a new build version, using tag: prerelease');
            }

            // 设置输出
            core.setOutput('tag_name', tagName);
            core.setOutput('create_new_tag', createNewTag.toString()); // 输出为字符串 "true" 或 "false"
            core.setOutput('is_prerelease', isPrereleaseOnGitHub.toString());

      - name: Setup node
        if: steps.determine_tag.outputs.create_new_tag == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Generate changelog
        if: steps.determine_tag.outputs.create_new_tag == 'true'
        id: create_release
        run: npx changelogithub --name ${{ steps.determine_tag.outputs.tag_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🥳 Publish Build Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          artifacts: dist/Dockit.zip
          commit: ${{ inputs.branch }}
          bodyFile: ${{ steps.determine_tag.outputs.create_new_tag == 'true' && 'CHANGELOG.md' || '' }}
          name: "Build: ${{ steps.determine_tag.outputs.tag_name }}"
          prerelease: ${{ steps.determine_tag.outputs.is_prerelease == 'true' }}
          tag: ${{ steps.determine_tag.outputs.tag_name }}
          token: ${{ secrets.GITHUB_TOKEN }}
